/* tslint:disable */
/* eslint-disable */
/**
 * Read Worth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface ClientResponse
 */
export interface ClientResponse {
  /**
   *
   * @type {number}
   * @memberof ClientResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ClientResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ClientResponse
   */
  plan: string;
}
/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
  /**
   *
   * @type {number}
   * @memberof UserResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  apiToken: string;
  /**
   *
   * @type {UserResponseRole}
   * @memberof UserResponse
   */
  role: UserResponseRole;
  /**
   *
   * @type {Array<UserResponseClientsInner>}
   * @memberof UserResponse
   */
  clients: Array<UserResponseClientsInner>;
}
/**
 *
 * @export
 * @interface UserResponseClientsInner
 */
export interface UserResponseClientsInner {
  /**
   *
   * @type {number}
   * @memberof UserResponseClientsInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserResponseClientsInner
   */
  name: string;
}
/**
 *
 * @export
 * @interface UserResponseRole
 */
export interface UserResponseRole {
  /**
   *
   * @type {boolean}
   * @memberof UserResponseRole
   */
  isAccountManager: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserResponseRole
   */
  isBookManager: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserResponseRole
   */
  isClientManager: boolean;
}
/**
 *
 * @export
 * @interface UsersResponse
 */
export interface UsersResponse {
  /**
   *
   * @type {Array<UsersResponseUsersInner>}
   * @memberof UsersResponse
   */
  users: Array<UsersResponseUsersInner>;
}
/**
 *
 * @export
 * @interface UsersResponseUsersInner
 */
export interface UsersResponseUsersInner {
  /**
   *
   * @type {number}
   * @memberof UsersResponseUsersInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UsersResponseUsersInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UsersResponseUsersInner
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UsersResponseUsersInner
   */
  apiToken: string;
  /**
   *
   * @type {UserResponseRole}
   * @memberof UsersResponseUsersInner
   */
  role: UserResponseRole;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 組織情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdClientGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdClientGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/client`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdMeGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdMeGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/me`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 組織に所属しているユーザー情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUsersGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdUsersGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/users`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 組織情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdClientGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdClientGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdMeGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdMeGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 組織に所属しているユーザー情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdUsersGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdUsersGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary 組織情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdClientGet(clientId: number, options?: any): AxiosPromise<ClientResponse> {
      return localVarFp.apiClientIdClientGet(clientId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdMeGet(clientId: number, options?: any): AxiosPromise<UserResponse> {
      return localVarFp.apiClientIdMeGet(clientId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 組織に所属しているユーザー情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUsersGet(clientId: number, options?: any): AxiosPromise<UsersResponse> {
      return localVarFp.apiClientIdUsersGet(clientId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary 組織情報
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdClientGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdClientGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 自分の情報
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdMeGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdMeGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 組織に所属しているユーザー情報
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdUsersGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdUsersGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
