/* tslint:disable */
/* eslint-disable */
/**
 * Read Worth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface BookHistoriesListResponseInner
 */
export interface BookHistoriesListResponseInner {
  /**
   *
   * @type {string}
   * @memberof BookHistoriesListResponseInner
   */
  userName: string;
  /**
   *
   * @type {string}
   * @memberof BookHistoriesListResponseInner
   */
  actionName: string;
  /**
   *
   * @type {string}
   * @memberof BookHistoriesListResponseInner
   */
  createdAt: string;
}
/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponse
 */
export interface BookPurchaseAppliesListResponse {
  /**
   *
   * @type {boolean}
   * @memberof BookPurchaseAppliesListResponse
   */
  slackCredentialExists: boolean;
  /**
   *
   * @type {Array<BookPurchaseAppliesListResponseBookPurchaseAppliesInner>}
   * @memberof BookPurchaseAppliesListResponse
   */
  bookPurchaseApplies: Array<BookPurchaseAppliesListResponseBookPurchaseAppliesInner>;
}
/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponseBookPurchaseAppliesInner
 */
export interface BookPurchaseAppliesListResponseBookPurchaseAppliesInner {
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  reason: string;
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  price: number;
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  step: number;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  location: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  createdAt: string;
  /**
   *
   * @type {BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  user: BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser;
  /**
   *
   * @type {BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  book: BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook;
}
/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
 */
export interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook {
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  image: string | null;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  createdAt: string;
}
/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
 */
export interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser {
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
   */
  email: string;
}
/**
 *
 * @export
 * @interface BookUpdateRequest
 */
export interface BookUpdateRequest {
  /**
   *
   * @type {number}
   * @memberof BookUpdateRequest
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof BookUpdateRequest
   */
  category: string;
  /**
   *
   * @type {number}
   * @memberof BookUpdateRequest
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof BookUpdateRequest
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BookUpdateRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof BookUpdateRequest
   */
  image: string | null;
  /**
   *
   * @type {string}
   * @memberof BookUpdateRequest
   */
  url?: string | null;
}
/**
 *
 * @export
 * @interface BookUpdateValidateErrorResponse
 */
export interface BookUpdateValidateErrorResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof BookUpdateValidateErrorResponse
   */
  id?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof BookUpdateValidateErrorResponse
   */
  category?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof BookUpdateValidateErrorResponse
   */
  status?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof BookUpdateValidateErrorResponse
   */
  title?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof BookUpdateValidateErrorResponse
   */
  description?: Array<string>;
}
/**
 *
 * @export
 * @interface BooksResponse
 */
export interface BooksResponse {
  /**
   *
   * @type {Array<BooksResponseBooksInner>}
   * @memberof BooksResponse
   */
  books: Array<BooksResponseBooksInner>;
  /**
   *
   * @type {Array<BooksResponseBookCategoriesInner>}
   * @memberof BooksResponse
   */
  bookCategories: Array<BooksResponseBookCategoriesInner>;
}
/**
 *
 * @export
 * @interface BooksResponseBookCategoriesInner
 */
export interface BooksResponseBookCategoriesInner {
  /**
   *
   * @type {string}
   * @memberof BooksResponseBookCategoriesInner
   */
  name: string;
}
/**
 *
 * @export
 * @interface BooksResponseBooksInner
 */
export interface BooksResponseBooksInner {
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInner
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInner
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  image: string | null;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  createdAt: string;
  /**
   *
   * @type {BooksResponseBooksInnerPurchaseApplicant}
   * @memberof BooksResponseBooksInner
   */
  purchaseApplicant: BooksResponseBooksInnerPurchaseApplicant;
  /**
   *
   * @type {BooksResponseBooksInnerPurchaseApplicant}
   * @memberof BooksResponseBooksInner
   */
  rentalApplicant: BooksResponseBooksInnerPurchaseApplicant;
  /**
   *
   * @type {Array<BooksResponseBooksInnerReviewsInner>}
   * @memberof BooksResponseBooksInner
   */
  reviews: Array<BooksResponseBooksInnerReviewsInner>;
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInner
   */
  rentalCount: number;
}
/**
 *
 * @export
 * @interface BooksResponseBooksInnerPurchaseApplicant
 */
export interface BooksResponseBooksInnerPurchaseApplicant {
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInnerPurchaseApplicant
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerPurchaseApplicant
   */
  name?: string;
}
/**
 *
 * @export
 * @interface BooksResponseBooksInnerReviewsInner
 */
export interface BooksResponseBooksInnerReviewsInner {
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInnerReviewsInner
   */
  rate: number;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerReviewsInner
   */
  review: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerReviewsInner
   */
  reviewedAt: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerReviewsInner
   */
  reviewer: string;
}
/**
 *
 * @export
 * @interface ClientResponse
 */
export interface ClientResponse {
  /**
   *
   * @type {number}
   * @memberof ClientResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ClientResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ClientResponse
   */
  plan: string;
}
/**
 *
 * @export
 * @interface ClientsResponseInner
 */
export interface ClientsResponseInner {
  /**
   *
   * @type {number}
   * @memberof ClientsResponseInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ClientsResponseInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ClientsResponseInner
   */
  plan: string;
}
/**
 *
 * @export
 * @interface MeResponse
 */
export interface MeResponse {
  /**
   *
   * @type {number}
   * @memberof MeResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  apiToken: string;
  /**
   *
   * @type {MeResponseRole}
   * @memberof MeResponse
   */
  role: MeResponseRole;
  /**
   *
   * @type {Array<MeResponseWorkspacesInner>}
   * @memberof MeResponse
   */
  workspaces: Array<MeResponseWorkspacesInner>;
}
/**
 *
 * @export
 * @interface MeResponseRole
 */
export interface MeResponseRole {
  /**
   *
   * @type {boolean}
   * @memberof MeResponseRole
   */
  isAccountManager: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MeResponseRole
   */
  isBookManager: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MeResponseRole
   */
  isWorkspaceManager: boolean;
}
/**
 *
 * @export
 * @interface MeResponseWorkspacesInner
 */
export interface MeResponseWorkspacesInner {
  /**
   *
   * @type {number}
   * @memberof MeResponseWorkspacesInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof MeResponseWorkspacesInner
   */
  name: string;
}
/**
 *
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
  /**
   *
   * @type {string}
   * @memberof UserCreateRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateRequest
   */
  email: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateRequest
   */
  roles: Array<string>;
}
/**
 *
 * @export
 * @interface UserCreateValidateErrorResponse
 */
export interface UserCreateValidateErrorResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateValidateErrorResponse
   */
  name?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateValidateErrorResponse
   */
  email?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateValidateErrorResponse
   */
  roles?: Array<string>;
}
/**
 *
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
  /**
   *
   * @type {number}
   * @memberof UserUpdateRequest
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  email: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateRequest
   */
  roles: Array<string>;
}
/**
 *
 * @export
 * @interface UserUpdateValidateErrorResponse
 */
export interface UserUpdateValidateErrorResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  id?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  name?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  email?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  roles?: Array<string>;
}
/**
 *
 * @export
 * @interface UsersListResponse
 */
export interface UsersListResponse {
  /**
   *
   * @type {Array<UsersListResponseUsersInner>}
   * @memberof UsersListResponse
   */
  users: Array<UsersListResponseUsersInner>;
}
/**
 *
 * @export
 * @interface UsersListResponseUsersInner
 */
export interface UsersListResponseUsersInner {
  /**
   *
   * @type {number}
   * @memberof UsersListResponseUsersInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UsersListResponseUsersInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UsersListResponseUsersInner
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UsersListResponseUsersInner
   */
  apiToken: string;
  /**
   *
   * @type {MeResponseRole}
   * @memberof UsersListResponseUsersInner
   */
  role: MeResponseRole;
}
/**
 *
 * @export
 * @interface WorkspaceCreateRequest
 */
export interface WorkspaceCreateRequest {
  /**
   *
   * @type {string}
   * @memberof WorkspaceCreateRequest
   */
  name: string;
}
/**
 *
 * @export
 * @interface WorkspaceCreateValidateErrorResponse
 */
export interface WorkspaceCreateValidateErrorResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof WorkspaceCreateValidateErrorResponse
   */
  name?: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Slack連携
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSlackWorkspaceIdConnectGet: async (workspaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiSlackWorkspaceIdConnectGet", "workspaceId", workspaceId);
      const localVarPath = `/api/slack/{workspaceId}/connect`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 書籍履歴
     * @param {number} workspaceId
     * @param {number} bookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBookIdHistoriesGet: async (workspaceId: number, bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdBookIdHistoriesGet", "workspaceId", workspaceId);
      // verify required parameter 'bookId' is not null or undefined
      assertParamExists("apiWorkspaceIdBookIdHistoriesGet", "bookId", bookId);
      const localVarPath = `/api/{workspaceId}/{bookId}/histories`
        .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
        .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 書籍購入申請一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBookPurchaseAppliesGet: async (workspaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdBookPurchaseAppliesGet", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/bookPurchaseApplies`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 書籍更新
     * @param {number} workspaceId
     * @param {BookUpdateRequest} [bookUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBookPut: async (
      workspaceId: number,
      bookUpdateRequest?: BookUpdateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdBookPut", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/book`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(bookUpdateRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 書籍一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBooksGet: async (workspaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdBooksGet", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/books`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ワークスペース情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdClientGet: async (workspaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdClientGet", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/client`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ワークスペース追加
     * @param {number} workspaceId
     * @param {WorkspaceCreateRequest} [workspaceCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdClientPost: async (
      workspaceId: number,
      workspaceCreateRequest?: WorkspaceCreateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdClientPost", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/client`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(workspaceCreateRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ワークスペース一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdClientsGet: async (workspaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdClientsGet", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/clients`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdMeGet: async (workspaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdMeGet", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/me`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ユーザー追加
     * @param {number} workspaceId
     * @param {UserCreateRequest} [userCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdUserPost: async (
      workspaceId: number,
      userCreateRequest?: UserCreateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdUserPost", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/user`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ユーザー更新
     * @param {number} workspaceId
     * @param {UserUpdateRequest} [userUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdUserPut: async (
      workspaceId: number,
      userUpdateRequest?: UserUpdateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdUserPut", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/user`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ワークスペースに所属しているユーザー情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdUsersGet: async (workspaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'workspaceId' is not null or undefined
      assertParamExists("apiWorkspaceIdUsersGet", "workspaceId", workspaceId);
      const localVarPath = `/api/{workspaceId}/users`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Slack連携
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSlackWorkspaceIdConnectGet(
      workspaceId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiSlackWorkspaceIdConnectGet(workspaceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 書籍履歴
     * @param {number} workspaceId
     * @param {number} bookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdBookIdHistoriesGet(
      workspaceId: number,
      bookId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookHistoriesListResponseInner>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdBookIdHistoriesGet(workspaceId, bookId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 書籍購入申請一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdBookPurchaseAppliesGet(
      workspaceId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookPurchaseAppliesListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdBookPurchaseAppliesGet(workspaceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 書籍更新
     * @param {number} workspaceId
     * @param {BookUpdateRequest} [bookUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdBookPut(
      workspaceId: number,
      bookUpdateRequest?: BookUpdateRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdBookPut(workspaceId, bookUpdateRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 書籍一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdBooksGet(
      workspaceId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooksResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdBooksGet(workspaceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ワークスペース情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdClientGet(
      workspaceId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdClientGet(workspaceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ワークスペース追加
     * @param {number} workspaceId
     * @param {WorkspaceCreateRequest} [workspaceCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdClientPost(
      workspaceId: number,
      workspaceCreateRequest?: WorkspaceCreateRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdClientPost(workspaceId, workspaceCreateRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ワークスペース一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdClientsGet(
      workspaceId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClientsResponseInner>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdClientsGet(workspaceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdMeGet(
      workspaceId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdMeGet(workspaceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ユーザー追加
     * @param {number} workspaceId
     * @param {UserCreateRequest} [userCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdUserPost(
      workspaceId: number,
      userCreateRequest?: UserCreateRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdUserPost(workspaceId, userCreateRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ユーザー更新
     * @param {number} workspaceId
     * @param {UserUpdateRequest} [userUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdUserPut(
      workspaceId: number,
      userUpdateRequest?: UserUpdateRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdUserPut(workspaceId, userUpdateRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ワークスペースに所属しているユーザー情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkspaceIdUsersGet(
      workspaceId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspaceIdUsersGet(workspaceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Slack連携
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSlackWorkspaceIdConnectGet(workspaceId: number, options?: any): AxiosPromise<void> {
      return localVarFp.apiSlackWorkspaceIdConnectGet(workspaceId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 書籍履歴
     * @param {number} workspaceId
     * @param {number} bookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBookIdHistoriesGet(workspaceId: number, bookId: number, options?: any): AxiosPromise<Array<BookHistoriesListResponseInner>> {
      return localVarFp.apiWorkspaceIdBookIdHistoriesGet(workspaceId, bookId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 書籍購入申請一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBookPurchaseAppliesGet(workspaceId: number, options?: any): AxiosPromise<BookPurchaseAppliesListResponse> {
      return localVarFp.apiWorkspaceIdBookPurchaseAppliesGet(workspaceId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 書籍更新
     * @param {number} workspaceId
     * @param {BookUpdateRequest} [bookUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBookPut(workspaceId: number, bookUpdateRequest?: BookUpdateRequest, options?: any): AxiosPromise<void> {
      return localVarFp.apiWorkspaceIdBookPut(workspaceId, bookUpdateRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 書籍一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdBooksGet(workspaceId: number, options?: any): AxiosPromise<BooksResponse> {
      return localVarFp.apiWorkspaceIdBooksGet(workspaceId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ワークスペース情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdClientGet(workspaceId: number, options?: any): AxiosPromise<ClientResponse> {
      return localVarFp.apiWorkspaceIdClientGet(workspaceId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ワークスペース追加
     * @param {number} workspaceId
     * @param {WorkspaceCreateRequest} [workspaceCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdClientPost(workspaceId: number, workspaceCreateRequest?: WorkspaceCreateRequest, options?: any): AxiosPromise<void> {
      return localVarFp.apiWorkspaceIdClientPost(workspaceId, workspaceCreateRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ワークスペース一覧
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdClientsGet(workspaceId: number, options?: any): AxiosPromise<Array<ClientsResponseInner>> {
      return localVarFp.apiWorkspaceIdClientsGet(workspaceId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdMeGet(workspaceId: number, options?: any): AxiosPromise<MeResponse> {
      return localVarFp.apiWorkspaceIdMeGet(workspaceId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ユーザー追加
     * @param {number} workspaceId
     * @param {UserCreateRequest} [userCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdUserPost(workspaceId: number, userCreateRequest?: UserCreateRequest, options?: any): AxiosPromise<void> {
      return localVarFp.apiWorkspaceIdUserPost(workspaceId, userCreateRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ユーザー更新
     * @param {number} workspaceId
     * @param {UserUpdateRequest} [userUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdUserPut(workspaceId: number, userUpdateRequest?: UserUpdateRequest, options?: any): AxiosPromise<void> {
      return localVarFp.apiWorkspaceIdUserPut(workspaceId, userUpdateRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ワークスペースに所属しているユーザー情報
     * @param {number} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkspaceIdUsersGet(workspaceId: number, options?: any): AxiosPromise<UsersListResponse> {
      return localVarFp.apiWorkspaceIdUsersGet(workspaceId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Slack連携
   * @param {number} workspaceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiSlackWorkspaceIdConnectGet(workspaceId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiSlackWorkspaceIdConnectGet(workspaceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 書籍履歴
   * @param {number} workspaceId
   * @param {number} bookId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdBookIdHistoriesGet(workspaceId: number, bookId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdBookIdHistoriesGet(workspaceId, bookId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 書籍購入申請一覧
   * @param {number} workspaceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdBookPurchaseAppliesGet(workspaceId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdBookPurchaseAppliesGet(workspaceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 書籍更新
   * @param {number} workspaceId
   * @param {BookUpdateRequest} [bookUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdBookPut(workspaceId: number, bookUpdateRequest?: BookUpdateRequest, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdBookPut(workspaceId, bookUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 書籍一覧
   * @param {number} workspaceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdBooksGet(workspaceId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdBooksGet(workspaceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ワークスペース情報
   * @param {number} workspaceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdClientGet(workspaceId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdClientGet(workspaceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ワークスペース追加
   * @param {number} workspaceId
   * @param {WorkspaceCreateRequest} [workspaceCreateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdClientPost(workspaceId: number, workspaceCreateRequest?: WorkspaceCreateRequest, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdClientPost(workspaceId, workspaceCreateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ワークスペース一覧
   * @param {number} workspaceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdClientsGet(workspaceId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdClientsGet(workspaceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 自分の情報
   * @param {number} workspaceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdMeGet(workspaceId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdMeGet(workspaceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ユーザー追加
   * @param {number} workspaceId
   * @param {UserCreateRequest} [userCreateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdUserPost(workspaceId: number, userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdUserPost(workspaceId, userCreateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ユーザー更新
   * @param {number} workspaceId
   * @param {UserUpdateRequest} [userUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdUserPut(workspaceId: number, userUpdateRequest?: UserUpdateRequest, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdUserPut(workspaceId, userUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ワークスペースに所属しているユーザー情報
   * @param {number} workspaceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiWorkspaceIdUsersGet(workspaceId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiWorkspaceIdUsersGet(workspaceId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
