/* tslint:disable */
/* eslint-disable */
/**
 * Read Worth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponse
 */
export interface BookPurchaseAppliesListResponse {
  /**
   *
   * @type {boolean}
   * @memberof BookPurchaseAppliesListResponse
   */
  slackCredentialExists: boolean;
  /**
   *
   * @type {Array<BookPurchaseAppliesListResponseBookPurchaseAppliesInner>}
   * @memberof BookPurchaseAppliesListResponse
   */
  bookPurchaseApplies: Array<BookPurchaseAppliesListResponseBookPurchaseAppliesInner>;
}
/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponseBookPurchaseAppliesInner
 */
export interface BookPurchaseAppliesListResponseBookPurchaseAppliesInner {
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  reason: string;
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  price: number;
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  step: number;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  location: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  createdAt: string;
  /**
   *
   * @type {BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  user: BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser;
  /**
   *
   * @type {BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInner
   */
  book: BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook;
}
/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
 */
export interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook {
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  image?: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerBook
   */
  createdAt: string;
}
/**
 *
 * @export
 * @interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
 */
export interface BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser {
  /**
   *
   * @type {number}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof BookPurchaseAppliesListResponseBookPurchaseAppliesInnerUser
   */
  email: string;
}
/**
 *
 * @export
 * @interface BooksResponse
 */
export interface BooksResponse {
  /**
   *
   * @type {Array<BooksResponseBooksInner>}
   * @memberof BooksResponse
   */
  books: Array<BooksResponseBooksInner>;
  /**
   *
   * @type {Array<BooksResponseBookCategoriesInner>}
   * @memberof BooksResponse
   */
  bookCategories: Array<BooksResponseBookCategoriesInner>;
}
/**
 *
 * @export
 * @interface BooksResponseBookCategoriesInner
 */
export interface BooksResponseBookCategoriesInner {
  /**
   *
   * @type {string}
   * @memberof BooksResponseBookCategoriesInner
   */
  name: string;
}
/**
 *
 * @export
 * @interface BooksResponseBooksInner
 */
export interface BooksResponseBooksInner {
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInner
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInner
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  image?: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInner
   */
  createdAt: string;
  /**
   *
   * @type {BooksResponseBooksInnerPurchaseApplicant}
   * @memberof BooksResponseBooksInner
   */
  purchaseApplicant: BooksResponseBooksInnerPurchaseApplicant;
  /**
   *
   * @type {BooksResponseBooksInnerPurchaseApplicant}
   * @memberof BooksResponseBooksInner
   */
  rentalApplicant: BooksResponseBooksInnerPurchaseApplicant;
  /**
   *
   * @type {BooksResponseBooksInnerReviews}
   * @memberof BooksResponseBooksInner
   */
  reviews?: BooksResponseBooksInnerReviews;
}
/**
 *
 * @export
 * @interface BooksResponseBooksInnerPurchaseApplicant
 */
export interface BooksResponseBooksInnerPurchaseApplicant {
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInnerPurchaseApplicant
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerPurchaseApplicant
   */
  name?: string;
}
/**
 *
 * @export
 * @interface BooksResponseBooksInnerReviews
 */
export interface BooksResponseBooksInnerReviews {
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInnerReviews
   */
  rate: number;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerReviews
   */
  review: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerReviews
   */
  reviewedAt: string;
  /**
   *
   * @type {string}
   * @memberof BooksResponseBooksInnerReviews
   */
  reviewer: string;
  /**
   *
   * @type {number}
   * @memberof BooksResponseBooksInnerReviews
   */
  rentalCount?: number;
}
/**
 *
 * @export
 * @interface ClientResponse
 */
export interface ClientResponse {
  /**
   *
   * @type {number}
   * @memberof ClientResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ClientResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ClientResponse
   */
  plan: string;
}
/**
 *
 * @export
 * @interface ClientsResponseInner
 */
export interface ClientsResponseInner {
  /**
   *
   * @type {number}
   * @memberof ClientsResponseInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ClientsResponseInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ClientsResponseInner
   */
  plan: string;
}
/**
 *
 * @export
 * @interface MeResponse
 */
export interface MeResponse {
  /**
   *
   * @type {number}
   * @memberof MeResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  apiToken: string;
  /**
   *
   * @type {MeResponseRole}
   * @memberof MeResponse
   */
  role: MeResponseRole;
  /**
   *
   * @type {Array<MeResponseClientsInner>}
   * @memberof MeResponse
   */
  clients: Array<MeResponseClientsInner>;
}
/**
 *
 * @export
 * @interface MeResponseClientsInner
 */
export interface MeResponseClientsInner {
  /**
   *
   * @type {number}
   * @memberof MeResponseClientsInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof MeResponseClientsInner
   */
  name: string;
}
/**
 *
 * @export
 * @interface MeResponseRole
 */
export interface MeResponseRole {
  /**
   *
   * @type {boolean}
   * @memberof MeResponseRole
   */
  isAccountManager: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MeResponseRole
   */
  isBookManager: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MeResponseRole
   */
  isClientManager: boolean;
}
/**
 *
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
  /**
   *
   * @type {string}
   * @memberof UserCreateRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateRequest
   */
  email: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateRequest
   */
  roles: Array<string>;
}
/**
 *
 * @export
 * @interface UserCreateValidateErrorResponse
 */
export interface UserCreateValidateErrorResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateValidateErrorResponse
   */
  name?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateValidateErrorResponse
   */
  email?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserCreateValidateErrorResponse
   */
  roles?: Array<string>;
}
/**
 *
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
  /**
   *
   * @type {number}
   * @memberof UserUpdateRequest
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  email: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateRequest
   */
  roles: Array<string>;
}
/**
 *
 * @export
 * @interface UserUpdateValidateErrorResponse
 */
export interface UserUpdateValidateErrorResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  id?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  name?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  email?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateValidateErrorResponse
   */
  roles?: Array<string>;
}
/**
 *
 * @export
 * @interface UsersListResponse
 */
export interface UsersListResponse {
  /**
   *
   * @type {Array<UsersListResponseUsersInner>}
   * @memberof UsersListResponse
   */
  users: Array<UsersListResponseUsersInner>;
}
/**
 *
 * @export
 * @interface UsersListResponseUsersInner
 */
export interface UsersListResponseUsersInner {
  /**
   *
   * @type {number}
   * @memberof UsersListResponseUsersInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UsersListResponseUsersInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UsersListResponseUsersInner
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UsersListResponseUsersInner
   */
  apiToken: string;
  /**
   *
   * @type {MeResponseRole}
   * @memberof UsersListResponseUsersInner
   */
  role: MeResponseRole;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 書籍購入申請一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdBookPurchaseAppliesGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdBookPurchaseAppliesGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/bookPurchaseApplies`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 書籍一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdBooksGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdBooksGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/books`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 組織情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdClientGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdClientGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/client`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 組織一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdClientsGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdClientsGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/clients`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdMeGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdMeGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/me`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ユーザー追加
     * @param {number} clientId
     * @param {UserCreateRequest} [userCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUserPost: async (clientId: number, userCreateRequest?: UserCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdUserPost", "clientId", clientId);
      const localVarPath = `/api/{clientId}/user`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ユーザー更新
     * @param {number} clientId
     * @param {UserUpdateRequest} [userUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUserPut: async (clientId: number, userUpdateRequest?: UserUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdUserPut", "clientId", clientId);
      const localVarPath = `/api/{clientId}/user`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 組織に所属しているユーザー情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUsersGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("apiClientIdUsersGet", "clientId", clientId);
      const localVarPath = `/api/{clientId}/users`.replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 書籍購入申請一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdBookPurchaseAppliesGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookPurchaseAppliesListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdBookPurchaseAppliesGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 書籍一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdBooksGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooksResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdBooksGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 組織情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdClientGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdClientGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 組織一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdClientsGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClientsResponseInner>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdClientsGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdMeGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdMeGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ユーザー追加
     * @param {number} clientId
     * @param {UserCreateRequest} [userCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdUserPost(
      clientId: number,
      userCreateRequest?: UserCreateRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdUserPost(clientId, userCreateRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary ユーザー更新
     * @param {number} clientId
     * @param {UserUpdateRequest} [userUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdUserPut(
      clientId: number,
      userUpdateRequest?: UserUpdateRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdUserPut(clientId, userUpdateRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 組織に所属しているユーザー情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiClientIdUsersGet(
      clientId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdUsersGet(clientId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary 書籍購入申請一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdBookPurchaseAppliesGet(clientId: number, options?: any): AxiosPromise<BookPurchaseAppliesListResponse> {
      return localVarFp.apiClientIdBookPurchaseAppliesGet(clientId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 書籍一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdBooksGet(clientId: number, options?: any): AxiosPromise<BooksResponse> {
      return localVarFp.apiClientIdBooksGet(clientId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 組織情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdClientGet(clientId: number, options?: any): AxiosPromise<ClientResponse> {
      return localVarFp.apiClientIdClientGet(clientId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 組織一覧
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdClientsGet(clientId: number, options?: any): AxiosPromise<Array<ClientsResponseInner>> {
      return localVarFp.apiClientIdClientsGet(clientId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 自分の情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdMeGet(clientId: number, options?: any): AxiosPromise<MeResponse> {
      return localVarFp.apiClientIdMeGet(clientId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ユーザー追加
     * @param {number} clientId
     * @param {UserCreateRequest} [userCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUserPost(clientId: number, userCreateRequest?: UserCreateRequest, options?: any): AxiosPromise<void> {
      return localVarFp.apiClientIdUserPost(clientId, userCreateRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ユーザー更新
     * @param {number} clientId
     * @param {UserUpdateRequest} [userUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUserPut(clientId: number, userUpdateRequest?: UserUpdateRequest, options?: any): AxiosPromise<void> {
      return localVarFp.apiClientIdUserPut(clientId, userUpdateRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 組織に所属しているユーザー情報
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiClientIdUsersGet(clientId: number, options?: any): AxiosPromise<UsersListResponse> {
      return localVarFp.apiClientIdUsersGet(clientId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary 書籍購入申請一覧
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdBookPurchaseAppliesGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdBookPurchaseAppliesGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 書籍一覧
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdBooksGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdBooksGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 組織情報
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdClientGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdClientGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 組織一覧
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdClientsGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdClientsGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 自分の情報
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdMeGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdMeGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ユーザー追加
   * @param {number} clientId
   * @param {UserCreateRequest} [userCreateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdUserPost(clientId: number, userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdUserPost(clientId, userCreateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ユーザー更新
   * @param {number} clientId
   * @param {UserUpdateRequest} [userUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdUserPut(clientId: number, userUpdateRequest?: UserUpdateRequest, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdUserPut(clientId, userUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 組織に所属しているユーザー情報
   * @param {number} clientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiClientIdUsersGet(clientId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiClientIdUsersGet(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
